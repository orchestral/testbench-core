#!/usr/bin/env php
<?php

$workingPath = getcwd();

require __DIR__.'/../vendor/autoload.php';

$files = new Illuminate\Filesystem\Filesystem();

$files->delete("{$workingPath}/laravel/.env");
$files->deleteDirectory("{$workingPath}/skeleton");
if ($files->isDirectory("{$workingPath}/laravel/migrations")) {
    $files->deleteDirectory("{$workingPath}/laravel/migrations");
}

$files->ensureDirectoryExists("{$workingPath}/laravel/migrations");
$files->ensureDirectoryExists("{$workingPath}/laravel/migrations/cache");
$files->ensureDirectoryExists("{$workingPath}/laravel/migrations/notifications");
$files->ensureDirectoryExists("{$workingPath}/laravel/migrations/queue");
$files->ensureDirectoryExists("{$workingPath}/laravel/migrations/session");

$files->copy("{$workingPath}/vendor/laravel/framework/src/Illuminate/Foundation/resources/server.php", "{$workingPath}/laravel/server.php");
transform([
    "getcwd()" => "__DIR__.'/public'",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/server.php"));

Symfony\Component\Process\Process::fromShellCommandline(
    'composer create-project "laravel/laravel:9.x-dev" skeleton --no-scripts --no-plugins --quiet --no-install', $workingPath
)->mustRun();

Illuminate\Support\Collection::make([
    'artisan',
    '.env.example',
    'config/*.php',
    'database/.gitignore',
    'database/migrations/2014_10_12_000000_create_users_table.php',
    'database/migrations/2014_10_12_100000_create_password_resets_table.php',
    'database/migrations/2019_08_19_000000_create_failed_jobs_table.php',
    'lang/en/*.php',
    'lang/*.json',
    'resources/views/*',
    'public/index.php',
    'tests/CreatesApplication.php',
])->transform(fn ($file) => "{$workingPath}/skeleton/{$file}")
->map(fn ($file) => str_contains($file, '*') ? [...$files->glob($file)] : $file)
->flatten()
->each(function ($file) use ($files, $workingPath) {
    $files->copy($file, "{$workingPath}/laravel".Illuminate\Support\Str::after($file, "{$workingPath}/skeleton"));
});
$files->delete("{$workingPath}/laravel/config/sanctum.php");
$files->move("{$workingPath}/laravel/database/migrations/2014_10_12_000000_create_users_table.php", "{$workingPath}/laravel/migrations/2014_10_12_000000_testbench_create_users_table.php");
$files->move("{$workingPath}/laravel/database/migrations/2014_10_12_100000_create_password_resets_table.php", "{$workingPath}/laravel/migrations/2014_10_12_100000_testbench_create_password_resets_table.php");
$files->move("{$workingPath}/laravel/database/migrations/2019_08_19_000000_create_failed_jobs_table.php", "{$workingPath}/laravel/migrations/2019_08_19_000000_testbench_create_failed_jobs_table.php");

Illuminate\Support\Collection::make([
    'cache/0001_01_01_000000_testbench_create_cache_table' => 'Cache/Console/stubs/cache.stub',
    'notifications/0001_01_01_000000_testbench_create_notifications_table' => 'Notifications/Console/stubs/notifications.stub',
    'queue/0001_01_01_000000_testbench_create_jobs_table' => 'Queue/Console/stubs/jobs.stub',
    'queue/0001_01_01_000000_testbench_create_job_batches_table' => 'Queue/Console/stubs/batches.stub',
    // 'queue/0001_01_01_000000_testbench_create_failed_jobs_table' => 'Queue/Console/stubs/failed_jobs.stub',
    'session/0001_01_01_000000_testbench_create_sessions_table' => 'Session/Console/stubs/database.stub',
])->transform(fn ($file) => "{$workingPath}/vendor/laravel/framework/src/Illuminate/{$file}")
->each(function ($from, $to) use ($files, $workingPath) {
    $files->copy($from, "{$workingPath}/laravel/migrations/{$to}.php");
})->keys()
->push(...[
    '2014_10_12_000000_testbench_create_users_table',
    '2014_10_12_100000_testbench_create_password_resets_table',
    '2019_08_19_000000_testbench_create_failed_jobs_table',
])->each(function ($migration) use ($files, $workingPath) {
    $files->replaceInFile('class Create', 'class TestbenchCreate', "{$workingPath}/laravel/migrations/{$migration}.php");
})->filter(fn ($migration) => str_starts_with($migration, 'queue'))
->mapWithKeys(fn ($migration) => match ($migration) {
    'queue/0001_01_01_000000_testbench_create_jobs_table' => [$migration => 'jobs'],
    'queue/0001_01_01_000000_testbench_create_job_batches_table' => [$migration => 'job_batches'],
    // 'queue/0001_01_01_000000_testbench_create_failed_jobs_table' => [$migration => 'failed_jobs'],
})->each(function ($table, $migration) use ($files, $workingPath) {
    $files->replaceInFile(['{{tableClassName}}', '{{table}}'], [Illuminate\Support\Str::studly($table), $table], "{$workingPath}/laravel/migrations/{$migration}.php");
});

transform([
    '$app = require_once __DIR__.\'/bootstrap/app.php\';' => '$app = require_once __DIR__.\'/bootstrap/app.php\';'.PHP_EOL.PHP_EOL.'(new Orchestra\Testbench\Foundation\Console\Bootstrap\SyncTestbenchConfigurationFiles)->bootstrap($app);',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/artisan"));

transform([
    PHP_EOL.'APP_KEY=' => PHP_EOL.'APP_KEY=AckfSECXIvnK5r28GVIWUAxmbBSjTsmF',
    PHP_EOL.'DB_CONNECTION=mysql' => PHP_EOL.'DB_CONNECTION=sqlite',
    PHP_EOL.'DB_HOST=' => PHP_EOL.'# DB_HOST=',
    PHP_EOL.'DB_PORT=' => PHP_EOL.'# DB_PORT=',
    PHP_EOL.'DB_DATABASE=' => PHP_EOL.'# DB_DATABASE=',
    PHP_EOL.'DB_USERNAME=' => PHP_EOL.'# DB_USERNAME=',
    PHP_EOL.'DB_PASSWORD=' => PHP_EOL.'# DB_PASSWORD=',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/.env.example"));

transform([
    "env('APP_ENV', 'production')" => "env('APP_ENV', 'workbench')",
    PHP_EOL.'        App\Providers' => PHP_EOL.'        // App\Providers',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/app.php"));

transform([
    "'model' => App\Models\User::class" => "'model' => Illuminate\Foundation\Auth\User::class",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/auth.php"));

transform([
    "env('CACHE_DRIVER', 'file')" => "env('CACHE_DRIVER', 'array')",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/cache.php"));

transform([
    "env('SESSION_DRIVER', 'file')" => "env('SESSION_DRIVER', 'array')",
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/laravel/config/session.php"));

$files->copy("{$workingPath}/skeleton/database/factories/UserFactory.php", "{$workingPath}/src/Factories/UserFactory.php");
transform([
    'namespace Database\Factories;' => 'namespace Orchestra\Testbench\Factories;',
    'use Illuminate\Database\Eloquent\Factories\Factory;' => 'use Illuminate\Database\Eloquent\Factories\Factory;'.PHP_EOL.'use Illuminate\Foundation\Auth\User;',
    ' * @extends \Illuminate\Database\Eloquent\Factories\Factory<\App\Models\User>' => ' * @phpstan-type TModel \Illuminate\Foundation\Auth\User
 *
 * @extends \Illuminate\Database\Eloquent\Factories\Factory<TModel>
 *
 * @property \Illuminate\Database\Eloquent\Model|TModel $model',
    '    }
}'.PHP_EOL => '    }

    /**
     * Get the name of the model that is generated by the factory.
     *
     * @return class-string<\Illuminate\Database\Eloquent\Model|TModel>
     */
    public function modelName()
    {
        return $this->model ?? config(\'auth.providers.users.model\', User::class);
    }
}
',
], fn ($changes) => $files->replaceInFile(array_keys($changes), array_values($changes), "{$workingPath}/src/Factories/UserFactory.php"));

$files->deleteDirectory("{$workingPath}/skeleton");
